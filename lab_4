import numpy as np  # общие математические и числовые операции
import matplotlib.pyplot as plt  # для построения графиков
#import sympy as sm  # для функции fwht()

def windows_Hamming(function):
    values_length = len(function)
    w = [0]*values_length
    for i in range(values_length):
        w[i] = 0.54 - 0.46 * np.cos(2 * np.pi / 16) * i
    for i in range(values_length):
        function[i] *= w[i]
    return function


def dft(function, direction):
    n = len(function)
    out_values = [complex(0, 0)] * n

    for m in range(n):
        for k in range(n):
            out_values[m] += function[k] * np.exp(direction * complex(0, -1) * 2 * np.pi * m * k / n)
        if direction == -1:
            out_values[m] /= n

    return out_values

if __name__ == '__main__':
    N = 16
    arguments = np.arange(0, N) * 2 * np.pi / N
    function = list(map(lambda x: np.sin(3 * x) + np.cos(x), arguments))

    function = dft(function, -1)

    result = [0]*N
    for i in range(N):
        result[i] = function[i]

    result = windows_Hamming(result)


    fig = plt.figure()
    ax_1 = fig.add_subplot(1, 3, 1)
    ax_2 = fig.add_subplot(1, 3, 3)


    ax_1.plot(arguments, function)
    ax_1.set(title='sin(3x) + cos(x)  ДПФ')
    ax_1.scatter(arguments, function, color='orange')
    ax_1.grid(True)

    ax_2.plot(arguments, result)
    ax_2.set(title='Полосовой оконный фильтр. Окно Хэмминга')
    ax_2.scatter(arguments, result, color='orange')
    ax_2.grid(True)

    # ax_3.plot(arguments, sympy_res)
    # ax_3.set(title='sympy.fwht')
    # ax_3.scatter(arguments, sympy_res, color='orange')
    # ax_3.grid(True)

    plt.show()
